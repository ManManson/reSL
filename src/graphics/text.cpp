#include "text.h"

#include "color.h"
#include "glyph.h"
#include "vga.h"
#include <game/resources/small_font.h>
#include <game/resources/text_glyphs.h>
#include <system/driver/driver.h>
#include <utility/sar.h>

namespace resl {

/* 1d7d:2969 : 256 bytes */
static const std::uint8_t g_charTraits[256] = {
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21,
    0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x01, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x04,
    0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
    0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x08, 0x08, 0x08, 0x08, 0x08,
    0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
    0x08, 0x08, 0x08, 0x40, 0x40, 0x40, 0x40, 0x20, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00
};

/* 1d7d:2962 : 2 bytes */
std::int16_t g_textSpacing = 1;

/* 1b06:1552 */
void drawText(std::int16_t x, std::int16_t y, const char* s, Color color)
{
    std::uint8_t oldGlyphHeight = g_glyphHeight;
    for (; *s; ++s) {
        std::uint8_t shiftedChar = *s - 0x20;
        const TextGlyph& g = g_textGlyphs[shiftedChar];
        g_glyphHeight = g.height;
        std::int16_t tileY = g.yOffset + y;
        if (g.width <= 8)
            drawGlyphW8(g.glyph, x, tileY, color);
        else
            drawGlyphW16(g.glyph, x, tileY, color);
        x += g.width + g_textSpacing;
    }
    g_glyphHeight = oldGlyphHeight;
}

/* 1b06:077c */
void drawTextSmall(std::int16_t x, std::int16_t y, const char* s, Color color)
{
    /* The original game searches two fonts in video memory: 8 and 14.
       It also has ability to choose the current font:
            1b06:052a   chooseSmallFont8
            1b06:0539   chooseSmallFont14

       But actually, the game chooses Font 14 at startup and never
       changes it from then on.

       Thus, only font 14 is implemented here.
   */

    /* 1b06:01e8 : 2 bytes */
    static constexpr std::int16_t g_curSmallFontSize = 14;
    /* 1b06:01ea : 4 bytes */
    static constexpr const std::uint8_t* g_curSmallFontData = g_font14Data;

    vga::VideoMemPtr symbStartPtr =
        vga::VIDEO_MEM_START_ADDR + y * vga::VIDEO_MEM_ROW_BYTES + sar(x, 3);

    for (; *s; ++s, ++symbStartPtr) {
        const std::uint8_t* glyphPtr = &g_curSmallFontData[*s * g_curSmallFontSize];
        vga::VideoMemPtr ptr = symbStartPtr;
        for (std::int16_t curY = 0; curY < g_curSmallFontSize; ++curY) {
            Driver::instance().vga().setWriteMask(glyphPtr[curY]);
            Driver::instance().vga().write(ptr, color);
            ptr += vga::VIDEO_MEM_ROW_BYTES;
        }
    }
}

/* 15e8:0984 */
std::int16_t measureText(const char* s)
{
    std::int16_t width = 0;
    for (; *s; ++s) {
        width += g_textSpacing + 9;
        if (g_charTraits[*s] & (4 | 2))
            width += 4;
    }
    return width;
}

} // namespace resl
